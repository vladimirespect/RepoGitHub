<?php


namespace app\traits;


trait TSingletone
{
//Pattern Singletone начало   - минус паттерна в том, что если надо будет коннектится к разным хостам (например при удаленном хранении данных на ещё одном сервере), у нас не получится создать ещё один экз.класса
    private static $instance = null; //Db object  //будем хранить внутри класса, экземпляр этого же класса [instance==экземпляр]
    //статик в переменной означает что это будет общей переменной для всех объектов этого класса
    //а статик в методе означает что мы можем вызвать этот метод класса без создания экземпляра класса через :: прим. с главной  $db = Db::getInstance();

    private function __construct() {} //сделав конструктор приватным, мы не позволяем его вызвать снаружи для создания экземпляра класса
    // ещё несколько способов которыми можно было создать экземпляр класса снаружи
    private function __clone() {}
    private function __wakeup() {}
    //теперь new Db() снаружи не сработает

    //это нужно чтобы шторм знал какой объект ожидать от вызова функции гет инстанс (в модели)
    /**
     * @return static
     */
    public static function getInstance() //нужна чтобы мы могли вызвать метод (например execute)  без создания экземпляра класса Db
    {
        if (is_null(static::$instance)) { //мы не можем создать первое соединение, т.к. экземпляp объекта ещё не создан, на выручку приходит Статика.
            static::$instance = new static(); //static::$instance вместо self::$instance для позднего статического связывания
            // new static() вместо new Db()- потому что имя класса может быть другое, а этот статик ссылается на название класса и создаёт его экземпляр в данном контексте
        }
        return static::$instance;
    }
    //Pattern Singletone конец
}