<?php

session_start();

use app\engine\{Autoload, App};
//такой список работает в версиях старше 7й

//нужно присвоить неймспейс каждому классу, который соответсвует пути где лежит этот файл+1 папка сверху 'app' во избежании конфликта с библиотеками
//каждому классу соответствует своя страница с именем как у класса
//каждому образцу вместо длинного имени с полным путём к виртуальной папке обьявить псевдоним в начале кода через use.

include "../config/config.php";
//include "../engine/Autoload.php"; после добавления автозагрузчика phpunit с папки vendor после редактирования composer
//необходимость в нашем автозагрузчике отпала
include "../vendor/autoload.php";

spl_autoload_register([new Autoload(), 'loadClass']); //требует два параметра 1) экземпляр класса автозагрузчика, 2) имя метода его класса отвечающего за загрузку
//плюс в том что создаётся всего один экземпляр автозагрузчика

$config = include "../config/config.php";

//try catch - перхват фатала. Нужен для поиска ошибок во время разработки.
// А тесты при добавлении функционала. Кетч ловит ошибку в любом месте проекта. Если ошибок нет просто выдаст страницу как обычно
try {
    App::call()->run($config); //всё наше приложение, помещается в одну строчку

} catch (\PDOException $exception) { //можем последовательно ловить и отлаживать разные исключения, как здесь в ПДО
    var_dump($exception->getMessage()); //в engine class Request приведён пример как унаследоваться от exception чтобы делать так в своих классах

} catch (\Exception $exception) { //главное не забывать что исключения \Exception должны идти после всех остальных
    var_dump($exception->getTrace());
    //если хотим вникнуть читаем Котерова
}
